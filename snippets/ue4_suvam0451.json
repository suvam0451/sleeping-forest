{
	"Loop": {
		"prefix": "loop",
		"body": ["for(int i = 0; i < $1; i++) {\n\t$2\n}"]
	},
	"2D Loop": {
		"prefix": "loop2",
		"body": [
			"for(int i = 0; i < $1; i++) {",
			"\tfor(int i = 0; i < $2; i++) {",
			"\t\t${3:Loopbody}",
			"\t}",
			"}"
		]
	},
	"CreateDefaultSubobject": {
		"prefix": "ucdo",
		"body": ["CreateDefaultSubobject<$1>(\"$2\");", "$0"]
	},
	"NewObject": {
		"prefix": "unew",
		"body": ["NewObject<$1>(\"\");"],
		"description": [
			"Used to initialize object outside constructor",
			"Don't forget to register component and attach to SceneComponent to be visible in inspector.",
			"Naming field and owner field are optional and hence left out.",
			"Full syntax: XYZ = NewObject<UType>(\"Your object name\", this)"
		]
	},
	"Add a SceneComponent property to replace RootComponent": {
		"prefix": "uroot_h",
		"body": [
			"// SceneComponent to replace RootComponent",
			"UPROPERTY(EditAnywhere, Category = \"Parameters\")",
			"\tUSceneComponent *SceneRoot;"
		],
		"description": [
			"Creates dummy SceneComponent intended to replace RootComponent in actors.",
			"This is because otherwise, the first added component becomes the root and destroying it in gameplay loop makes the object immovable.",
			"Basically to avoid silly mistakes...",
			"Don't forget to run uroot_cpp in actor constructor !!!"
		]
	},
	"declare the SceneComponent in source file": {
		"prefix": "uroot_cpp",
		"body": [
			"SceneRoot = CreateDefaultSubobject<USceneComponent>(\"SceneRoot\");",
			"RootComponent = SceneRoot;\n"
		]
	},
	"USTRUCT": {
		"prefix": "ustruct_native",
		"body": [
			"USTRUCT(BlueprintType)",
			"struct F${1:NameOfStruct} : public FTableRowBase",
			"{",
			"\tGENERATED_BODY()",
			"",
			"$0",
			"};"
		],
		"description": ["USTRUCT template"]
	},
	"UENUM": {
		"prefix": "uenum",
		"body": ["UENUM()", "enum E$1", "{", "\t$0", "};"],
		"description": "Simple enum in ue4."
	},
	"ShaderDirectory": {
		"prefix": "ushaderdir",
		"body": [
			"#if (ENGINE_MINOR_VERSION > 21)",
			"AddShaderSourceDirectoryMapping(TEXT(\"/$2\"), FPaths::Combine(*(FPaths::ProjectPluginsDir()), TEXT(\"$1/Shaders\")));",
			"#endif"
		],
		"description": [
			"Adds a shader directory map.",
			"NOTE : The snippet works for a folder called \"Shader\" inside the plugin folder."
		]
	}
}
