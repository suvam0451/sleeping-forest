[
	{
		"id": "MaterialParameter",
		"body": [
			"",
			"// Use this to list paramaters(vectors here)",
			"TArray<FMaterialParameterInfo> OutParameterInfo;",
			"TArray<FGuid> OutParameterIds;",
			"$1->GetAllVectorParameterInfo(OutParameterInfo, OutParameterIds);",
			"for(auto it: OutParameterInfo) {",
			"UE_LOG(LogTemp, Warning, TEXT(\"Param at %i : name: %s\"), it.Index, *it.ToString());",
			"}"
		],
		"desc": "Used to debug print material parameter list",
		"action": "edit",
		"pattern": "UMaterialInstanceDynamic(\\*| ){2}(.*?)= UMaterialInstanceDynamic::Create",
		"parsemap": [2],
		"filepattern": ".cpp$"
	},
	{
		"id": "Example",
		"body": [],
		"desc": "Simple template for example",
		"action": "edit",
		"pattern": "Your regex here",
		"parsemap": [2, 4]
	},
	{
		"id": "MultiResult RayCast",
		"body": [
			"if ($1) {",
			"for (auto it : HitRes) {",
			"UE_LOG(LogTemp, Warning, TEXT(\"Impact at: %s caused by %s\"), *it.GetActor()->GetActorLocation().ToString(), *it.GetActor()->GetFName().ToString());",
			"// DrawDebugLine(this->GetWorld(), FVector(), it.GetActor()->GetActorLocation(), FColor::Green, false, 4.0f, 0, 0.5f);",
			"// DrawDebugPoint(this->GetWorld(), it.Location, 10.0f, FColor::Red, false, 4.0f, 0);",
			"}",
			"}"
		],
		"desc": "Helpers to draw debug spheres and lines for collisions(Multi result)",
		"action": "edit",
		"pattern": ".*?bool ([a-zA-Z_0-9]*)[ =]{3}.*?(Sweep)?Multi",
		"parsemap": [1],
		"filepattern": ".cpp$"
	},
	{
		"id": "SingleResult RayCast",
		"body": [
			"if ($1) {",
			"UE_LOG(LogTemp, Warning, TEXT(\"Impact at: %s caused by %s\"), *$2.GetActor()->GetActorLocation().ToString(), *$2.GetActor()->GetFName().ToString());",
			"// DrawDebugLine(this->GetWorld(), FVector(), $2.GetActor()->GetActorLocation(), FColor::Green, false, 4.0f, 0, 0.5f);",
			"// DrawDebugPoint(this->GetWorld(), it.Location, 10.0f, FColor::Red, false, 4.0f, 0);",
			"}"
		],
		"desc": "Helpers to draw debug spheres and lines for collisions(Single result)",
		"action": "edit",
		"pattern": ".*?bool ([a-zA-Z_0-9]*)[ =]{3}.*?Line.*?Single.*?\\(([a-zA-Z]*)\\,",
		"parsemap": [1, 2],
		"filepattern": ".cpp$"
	},
	{
		"id": "init_components",
		"body": [
			"$2 = CreateDefaultSubobject<U$1Component>(\"My$1\");",
			"$2->AttachToComponent(RootComponent, FAttachmentTransformRules::KeepRelativeTransform);"
		],
		"desc": "Initialization Scene/Sphere/StaticMesh etc",
		"action": "copy",
		"pattern": ".*?U([a-zA-Z_]*)?Component[\\*| ]{2}([a-zA-Z_]*)( = .*?)?;",
		"parsemap": [1, 2],
		"filepattern": ".h$"
	},
	{
		"id": "headerassembly",
		"body": [],
		"desc": "fires up the header include manager",
		"action": "headermodule",
		"pattern": "^#include ",
		"parsemap": []
	},
	{
		"id": "functionbodygen",
		"body": ["$1 $x::$2$3 {", "\t// Function not implemented", "}"],
		"desc": "Generates function body for a target line.",
		"action": "fnbodygen",
		"pattern": "^\t?(FORCEINLINE )?(virtual )?([a-z_A-Z<>,&*]*) ?([a-zA-Z_, <>(=0-9\"*& ]*\\))( const)?( override)?;",
		"parsemap": [3, 4, 5],
		"filepattern": ".h$"
	},
	{
		"id": "booleanswitch",
		"body": [
			"// Function(called on demand) will be bypassed while packaging",
			"if ($1 == true) {",
			"// Insert a function here;",
			"$1 = false;",
			"}"
		],
		"desc": "Copies initialization code for a boolean switch",
		"action": "copy",
		"pattern": "bool ([a-zA-Z_]*) [=| ]* false;",
		"parsemap": [1],
		"filepattern": ".cpp$"
	},
	{
		"id": "overrides",
		"body": [],
		"desc": "Generates header code for override functions.",
		"action": "overridelib",
		"pattern": "^(public|private|protected):$",
		"parsemap": [],
		"filepattern": ".h$"
	},
	{
		"id": "super_override",
		"body": [],
		"desc": "Replaces function default body with super",
		"action": "replace_super",
		"pattern": "// Function not implemented",
		"parsemap": []
	},
	{
		"id": "timer_init(delegate)",
		"body": [
			"$1.BindUFunction(this, FName(\"MyFunction\"), 0.5f);",
			"GetWorldTimerManager().SetTimer(YourTimerHandle, $1, 0.016f, true);"
		],
		"desc": "Initializes timers with a function",
		"action": "copy",
		"pattern": "FTimerDelegate (.*?);",
		"parsemap": [1],
		"filepattern": ".cpp$"
	},
	{
		"id": "timer_init(handle)",
		"body": [
			"YourDel.BindUFunction(this, FName(\"MyFunction\"), 0.5f);",
			"GetWorldTimerManager().SetTimer($1, YourDel, 0.016f, true);"
		],
		"desc": "Initializes timer with a function",
		"action": "copy",
		"pattern": "FTimerHandle (.*?);",
		"parsemap": [1],
		"filepattern": ".cpp$"
	}
]
